
#PROBLEM DESCRIPTION

#Divisors of 42 are : 1, 2, 3, 6, 7, 14, 21, 42. 
#These divisors squared are: 1, 4, 9, 36, 49, 196, 
#441, 1764. The sum of the squared divisors is 2500 
#which is 50 * 50, a square!

#Given two integers m, n (1 <= m <= n) we want to 
#find all integers between m and n whose sum of 
#squared divisors is itself a square. 42 is such a number.

#The result will be an array of arrays or of tuples 
#(in C an array of Pair) or a string, each subarray 
#having two elements, first the number whose squared 
#divisors is a square and then the sum of the squared divisors.


import math

def list_squared(m, n):
    divisor_lst = []
    squared_sum = 0
    if 1 <= m <= n:
        for i in range(m, n+1):
            if n%i == 0:
                divisor_lst.append(i)
    squared_divisor_lst = [i**2 for i in divisor_lst]
    for i in sqr:
        squared_sum += i
        if math.sqrt(squared_sum).is_integer():
            squared_divisor_lst.append([divisor_lst[sqr.index(i)],squared_sum])
            
    return squared_divisor_lst
